unit UnitLogin;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Layouts, FMX.Edit, FMX.TabControl,
  System.Actions, FMX.ActnList;

type
  TFormLogin = class(TForm)
    Layout_central: TLayout;
    Image_logo: TImage;
    Image_perfil: TImage;
    Layout_perfil: TLayout;
    Layout_usuário: TLayout;
    RoundRect_usuário: TRoundRect;
    Layout_senha: TLayout;
    Layout_central_inferior: TLayout;
    RoundRect_acessar: TRoundRect;
    Label_acessar: TLabel;
    StyleBook1: TStyleBook;
    Edit_usuario: TEdit;
    TabControl_login_cadastro: TTabControl;
    Login: TTabItem;
    Cadastro: TTabItem;
    Layout_central_cadastro: TLayout;
    Layout2: TLayout;
    RoundRect_nomecompleto: TRoundRect;
    Edit_nomecompleto: TEdit;
    Layout3: TLayout;
    RoundRect_senha_cadastro: TRoundRect;
    Edit_senha_cadastro: TEdit;
    Layout4: TLayout;
    RoundRect_salvar: TRoundRect;
    Label_salvar_cadastro: TLabel;
    Layout1: TLayout;
    RoundRect_usuario_cadastro: TRoundRect;
    Edit_usuario_cadastro: TEdit;
    ActionList1: TActionList;
    ChangeTabAction_login: TChangeTabAction;
    ChangeTabAction_cadastro: TChangeTabAction;
    Label_cadastrese: TLabel;
    Layout_inferior: TLayout;
    Layout_inferior_cadastro: TLayout;
    Label_voltarlogin: TLabel;
    Edit_senha: TEdit;
    RoundRect_senha: TRoundRect;
    procedure Label_cadastreseClick(Sender: TObject);
    procedure Label_voltarloginClick(Sender: TObject);
    procedure RoundRect_salvarClick(Sender: TObject);
    procedure RoundRect_acessarClick(Sender: TObject);

  private
    { Private declarations }
    function ValidarUsuario(usuario: string;senha: string):Boolean;
    procedure InserirUsuario(usuario: string;senha: string;nome: string);
    function RetornaNomeUsuario(usuario: string):string;

  public
    { Public declarations }
    var
      nomeUsuario: string;
  end;

var
  FormLogin: TFormLogin;


implementation

{$R *.fmx}

uses UnitPrincipal, UnitData;

//Função que retorna o nome completo do usuário que foi passado como parâmetro
function TFormLogin.RetornaNomeUsuario(usuario: string): string;
begin
  DM.FDConnexao.Close;
  DM.FDConnexao.Open();
  DM.FDTabelaUsuarios.Open();
  DM.Query.SQL.Clear;
  DM.Query.SQL.Add('SELECT nome FROM usuario WHERE usuario = :USUARIO;');
  DM.Query.ParamByName('USUARIO').AsString := usuario;
  DM.Query.Open();
  Result :=  DM.Query.FieldByName('nome').AsString;

end;

//Função para validar se o usuário existe, retorna True se sim e False se não.
function TFormLogin.ValidarUsuario(usuario, senha: string): Boolean;
begin
  DM.FDConnexao.Close;
  DM.FDConnexao.Open;
  DM.Query.Close;
  DM.Query.SQL.Clear;
  DM.Query.SQL.Add('SELECT usuario,senha FROM usuario WHERE usuario = :USUARIO and senha = :SENHA');
  DM.Query.ParamByName('USUARIO').AsString := usuario;
  DM.Query.ParamByName('SENHA').AsString := dm.Criptografa('C', senha);
  DM.Query.Open;
  if DM.Query.RecordCount > 0 then
    Result := True
  else
    Result := False;

  {
  DM.Query.SQL.Add('SELECT usuario,senha FROM usuario WHERE usuario = :USUARIO');
  DM.Query.ParamByName('USUARIO').AsString := usuario;
  DM.Query.Open;

  if DM.Query.RecordCount = 0 then
    begin
      Result := False;
    end
  else
    begin
      if dm.Criptografa('D', DM.Query.FieldByName('senha').AsString) = senha then
        begin
          Result := True;
        end
      else
        begin
          Result := False;
        end;
    end;
    }
end;

// Procedure que insere usuário no Banco de Dados
procedure TFormLogin.InserirUsuario(usuario, senha, nome: string);
begin
  usuario := Edit_usuario_cadastro.Text;
  nome := Edit_nomecompleto.Text;
  senha := Edit_senha_cadastro.Text;
  DM.FDConnexao.Close;
  DM.FDConnexao.Open;
  DM.Query.Close;
  DM.Query.SQL.Clear;
  DM.Query.SQL.Add('INSERT INTO usuario (usuario,nome,senha) VALUES (:USUARIO,:NOME,:SENHA); ');
  DM.Query.ParamByName('USUARIO').AsString := usuario;
  DM.Query.ParamByName('NOME').AsString := nome;
  DM.Query.ParamByName('SENHA').AsString := dm.Criptografa('C', senha);
  DM.Query.ExecSQL;
end;

// Clique Label para fazer cadastro
procedure TFormLogin.Label_cadastreseClick(Sender: TObject);
begin
  ChangeTabAction_cadastro.Execute;
end;

// Clique Label  para voltar para login
procedure TFormLogin.Label_voltarloginClick(Sender: TObject);
begin
  ChangeTabAction_login.Execute;
end;

//Botão Acessar - Login
procedure TFormLogin.RoundRect_acessarClick(Sender: TObject);
begin
  if ValidarUsuario(Edit_usuario.Text,Edit_senha.Text) then   //Se a Validação retornar True (defalt)
  begin
      //Retorna o nome do usuário e joga na variavel nomeUsuario
      nomeUsuario := RetornaNomeUsuario(Edit_usuario.Text);
      FormPrincipal := TFormPrincipal.Create(Self);
      FormLogin.hide;
      FormPrincipal.Show;
  end
  else  // Senão
  begin
    ShowMessage('Usuário ou senha Inválidos!');
  end;

end;


//Botão Salvar - Cadastro
procedure TFormLogin.RoundRect_salvarClick(Sender: TObject);
begin
  if (Edit_nomecompleto.Text <> '') and
  (Edit_senha_cadastro.Text <> '') and (Edit_usuario_cadastro.Text <> '') then
  begin
    InserirUsuario(Edit_usuario_cadastro.Text,Edit_senha_cadastro.Text,Edit_nomecompleto.Text);
    ShowMessage('Cadastro Feito Com sucesso!');
    ChangeTabAction_login.Execute;
  end;

end;


end.
